name: Train ML Model

on:
    workflow_dispatch:
    push:

env:
    EXPORT_NAME: 'training-exports.zip'
    EXPORT_LOCATION: 'exports/en-tw-transformer-nmt'
    PROJECT_DIR: 'projects/en-tw-transformer-nmt'
    TRAIN_SAMPLE: 100

jobs:
    train:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v2

            -   name: Set up Python
                uses: actions/setup-python@v2
                with:
                    cache: 'pip'
                    python-version: '3.11.7'

            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip
                    pip install jupyter keras papermill
                    pip install -r requirements.txt

            -   name: Check for latest release
                id: check_release
                run: |
                    echo "Checking for the latest release..."
                    latest_release=$(gh api repos/${{ github.repository }}/releases/latest --silent || echo "no_release")
                    if [[ "$latest_release" == "no_release" ]]; then
                      echo "No release found. Proceeding without downloading."
                      echo "::set-output name=release_exists::false"
                    else
                      echo "Release found. Preparing to download assets."
                      echo "::set-output name=release_exists::true"
                    fi
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Download latest release assets
                if: steps.check_release.outputs.release_exists == 'true'
                run: |
                    gh release download --repo ${{ github.repository }} --pattern '*'
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Unzip model checkpoints
                if: steps.check_release.outputs.release_exists == 'true'
                run: unzip $export_name -d $exports_location
                env:
                    export_name: ${{ env.EXPORT_NAME }}
                    exports_location: ${{ env.EXPORT_LOCATION }}

            -   name: Execute Jupyter Notebook
                run: |
                    papermill $project_dir/main.ipynb out.ipynb --prepare-only \
                        -p exports_dir "$export_dir" \
                        -p training_sample $training_sample \
                        -p num_attention_layers 4
                    jupyter nbconvert out.ipynb --to script
                    python out.py
                env:
                    training_sample: ${{ env.TRAIN_SAMPLE }}
                    export_dir: ${{ env.EXPORT_LOCATION }}
                    project_dir: ${{ env.PROJECT_DIR }}

            -   name: Create Release
                id: create_release
                uses: actions/create-release@v1
                with:
                    tag_name: ${{ github.run_id }}
                    release_name: Release for run ${{ github.run_id }}
                    draft: false
                    prerelease: false

            -   name: Upload Release Assets
                id: upload-release-assets
                uses: dwenegar/upload-release-assets@v1
                env:
                    GITHUB_TOKEN: ${{ github.token }}
                with:
                    release_id: ${{ steps.create_release.outputs.id }}
                    assets_path: ${{ env.EXPORT_LOCATION }}
                

